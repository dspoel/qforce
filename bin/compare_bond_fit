#!/usr/bin/env python3

import argparse
import json
import math

from qforce.misc import check_if_file_exists
from qforce.molecule.energies import bd_energy


def parse_command_line() -> tuple[str, str, str, str]:
    """Parse the command line input.

    Returns:
        The param files for harmonic bonds, Morse bonds, Morse MP2 bonds, and the output file path
    """
    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(formatter_class=formatter)
    parser.add_argument('-ha', type=check_if_file_exists, metavar='harmonic', required=True,
                        help='File for harmonic bonds.')
    parser.add_argument('-m', type=check_if_file_exists, metavar='morse', required=True,
                        help='File for Morse bonds.')
    parser.add_argument('-mmp2', type=check_if_file_exists, metavar='morse_mp2', required=True,
                        help='File for Morse MP2 bonds.')
    parser.add_argument('-o', type=str, metavar='output', required=True,
                        help='Name for output file.')
    args = parser.parse_args()

    # print(f'\nargs.ha = {args.ha}, type = {type(args.ha)}')
    # print(f'args.m = {args.m}, type = {type(args.m)}')
    # print(f'args.mmp2 = {args.mmp2}, type = {type(args.mmp2)}')
    # print(f'args.o = {args.o}, type = {type(args.o)}\n')

    return args.ha, args.m, args.mmp2, args.o


if __name__ == '__main__':
    harmonic, morse, morse_mp2, output = parse_command_line()

    harmonic_file = open(harmonic)
    harmonic_dct = json.load(harmonic_file)
    harmonic_file.close()

    morse_file = open(morse)
    morse_dct = json.load(morse_file)
    morse_file.close()

    morse_mp2_file = open(morse_mp2)
    morse_mp2_dct = json.load(morse_mp2_file)
    morse_mp2_file.close()

    new_dct = {}
    for k, v in harmonic_dct.items():
        if k.split('(')[0] == 'BondTerm':
            rhs = k[8:]
            new_dct[k] = [v, morse_dct['MorseTerm' + rhs], morse_mp2_dct['MorseMP2Term' + rhs]]
        else:
            new_dct[k] = [v, morse_dct[k], morse_mp2_dct[k]]

    with open(output, 'w') as out_file:
        json.dump(new_dct, out_file, indent=4)

