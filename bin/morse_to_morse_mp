#!/usr/bin/env python3

import argparse
import json
import math

from qforce.misc import check_if_file_exists
from qforce.molecule.energies import bd_energy


def parse_command_line():
    formatter = argparse.RawTextHelpFormatter
    parser = argparse.ArgumentParser(formatter_class=formatter)
    parser.add_argument('-i', type=check_if_file_exists, metavar='input', required=True,
                        help='Input params file.')
    parser.add_argument('-o', type=str, metavar='output', required=True,
                        help='Output params file.')
    args = parser.parse_args()

    print(f'\nargs.i = {args.i}, type = {type(args.i)}')
    print(f'args.o = {args.o}, type = {type(args.o)}\n')

    return args.i, args.o

def get_elems(key):
    elems = key.split('(')
    return elems[:-1] + elems[-1].split(')')[:-1]


if __name__ == '__main__':
    input_path, output_path = parse_command_line()

    in_file = open(input_path)
    dct = json.load(in_file)
    in_file.close()

    new_dct = {}
    for k, v in dct.items():
        if k.split('(')[0] == 'MorseTerm':
            elems = get_elems(k)
            bond_info = (elems[1].rstrip('0123456789'), int(float(elems[2])), elems[3].rstrip('0123456789'))
            well_depth = bd_energy[bond_info]
            new_v = [well_depth, math.sqrt(v[0]/(2*well_depth))]
            elems[0] = 'MorseMPTerm'
            new_k = f'{elems[0]}({elems[1]}({elems[2]}){elems[3]})'
            new_dct[new_k] = new_v
        else:
            new_dct[k] = v

    with open(output_path, 'w') as out_file:
        json.dump(new_dct, out_file, indent=4)

    print("\n")
